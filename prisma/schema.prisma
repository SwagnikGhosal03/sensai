// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User{
  id    String  @id @default(uuid())
  clerkUserId  String @unique
  email String @unique
  name String?
  imageUrl String?
  industry String?
  industryInsight industryInsight? @relation(fields: [industry],references: [industry])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bio String?
  experience Int?
  skills String[]
  assesments Assesment[]
  resume Resume[]
  coverLetter CoverLetter[] 
}
model Assesment{
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId],references: [id])
  quizScore Float
  questions Json[]
  category String
  improvementTip String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
}
model Resume{
  id String @id @default(cuid())
  userId String @unique
  user User @relation(fields: [userId],references: [id])
  content String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model CoverLetter{
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId],references: [id])
  content String
  jobDescription String?
  companyName String
  jobTitle String
  status String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
model industryInsight{
  id String @id @default(cuid())
  industry String @unique
  users User[]
  salaryRanges Json[]
  growthRate Float
  demandLevel String
  topSkills String[]
  marketOutlook String
  keyTrends String[]
  recommendedSkills String[]
  lastUpdated DateTime @default(now())
  nextUpdate DateTime

  @@index([industry])
}
enum demandLevel{
  HIGH
  MEDIUM
  LOW
}
enum marketOutlook{
  POSITIVE
  NEGATIVE 
  NEUTRAL
}